@page "/client-profile"
@attribute [Authorize(Roles = "Client")]
@inject ClientDataService ClientDataService
@inject TemplateService TemplateService
@inject AuthenticationStateProvider AuthenticationStateProvider

<h2>Client Profile</h2>



@if (clientData != null)
{
			<EditForm Model="@clientData" OnValidSubmit="@HandleValidSubmit">
				<DataAnnotationsValidator />
				<ValidationSummary />

				<div class="form-group">
					<label for="firstName">First Name:</label>
					<InputText id="firstName" @bind-Value="clientData.FirstName" class="form-control" />
				</div>

				<div class="form-group">
					<label for="lastName">Last Name:</label>
					<InputText id="lastName" @bind-Value="clientData.LastName" class="form-control" />
				</div>

				<div class="form-group">
					<label for="email">Email:</label>
					<InputText id="email" @bind-Value="clientData.Email" class="form-control" />
				</div>

				<div class="form-group">
					<label>Templates:</label>
			@foreach (var template in clientTemplates)
			{
								<div class="d-flex align-items-center mb-2">
									<span class="mr-2">@template.Name</span>
									<button class="btn btn-sm btn-danger" @onclick="() => RemoveTemplate(template.Id)">Remove</button>
								</div>
			}
				</div>



				<button type="submit" class="btn btn-primary">Save Client</button>
			</EditForm>

			<h3>Upload Template</h3>
			<InputFile OnChange="@LoadTemplate" />
}
else
{
			<p>Loading...</p>
}


@code {
	private string clientId = string.Empty;
	private ClientData clientData = new ClientData();
	private List<EmailTemplate> clientTemplates = new List<EmailTemplate>();
	private bool clientLoaded = false;

	protected override async Task OnInitializedAsync()
	{
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;

		if (user.Identity?.IsAuthenticated ?? false)
		{
			var clientId = user.FindFirst(c => c.Type == "client_id")?.Value;
			if (!string.IsNullOrEmpty(clientId))
			{
				clientData = await ClientDataService.GetClientDataAsync(clientId);
			}
		}
	}

	private async Task HandleValidSubmit()
	{
		await ClientDataService.UpsertClientDataAsync(clientData);
	}

	private async Task LoadTemplate(InputFileChangeEventArgs e)
	{
		var file = e.File;
		if (file != null && !string.IsNullOrEmpty(clientId))
		{
			var template = new EmailTemplate
				{
					Name = file.Name,
					Content = await new StreamReader(file.OpenReadStream()).ReadToEndAsync(),
					ClientId = clientId
				};
			var savedTemplate = await TemplateService.SaveTemplateAsync(template);
			if (savedTemplate != null)
			{
				clientTemplates = await TemplateService.GetClientTemplatesAsync(clientId);
			}
		}
	}

	private async Task RemoveTemplate(string templateId)
	{
		await TemplateService.DeleteTemplateAsync(clientId,templateId);
		clientTemplates = await TemplateService.GetClientTemplatesAsync(clientId);
	}
}


